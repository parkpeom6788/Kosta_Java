람다식 
코드가 간결해지고 , 지연 연산 등을 통해서 성능향상을 도모함
엘리먼트를 순회하는 경우에는 성능이 떨어질 수 있고 
코드를 분석하기 어려워 질 수 있다는 단점도 존재

람다식 형태 
(매개변수,...) -> { 실행문 }
화살표(->) 를 기준으로 왼쪽에는 람다식을 실행하기 위한 매개변수가 위치하고
오른쪽에는 매개변수를 이용한 실행 코드 혹은 실행 코드 블럭이 온다

합을 구해주는 sum() 이라는 메서드를 생각해본다

public int sum(int a , int b) {
	return a + b;
}
(a , b) -> a + b;
람다식으로 정의하면 불필요한 클래스의 정의도 필요없다
메서드의 리턴타입도 없고 , 메서드의 이름도 없다 
람다식을 익명함수(Anonymous Function) 라고 부르기도 한다

new Object(){
	int sum(int a , int b) {
		return a + b;
	}
}
람다식 문법(Lambda expression syntax)
(매개변수 목록) -> {람다식 바디}
람다식의 파라미터의 추론할 수 있는 경우에는 타입을 생략할 수 있다
(매개변수의 타입을 추론할 수 없는 경우에는 메서드이 매개변수 처럼 타입을 명시해줘야한다)
a - > a * a
중괄호가 생략된 람다식에는 세미콜론(;)을 붙이지 않는다.
한가지 예외가 있는데 람다식의 바디에 return 문이 있는 경우 중괄호 생략 불가
(a , b) -> { return a > b ? a : b }
중괄호를 쓰기 싫으면 
(a , b) -> a >  b ? a : b
이렇게 하나의 표현식으로 써주면 된다.

예제 ) 람다를 이용한 Runnable 구현

함수형 인터페이스 (Functional Interface)
람다식은 익명 객체 라고 했다 익명객체는 메서드의 인자로 넘겨줄수도 있고 
메서드의 리턴값으로 넘겨 받을 수도 있다 
익명 객체인 람다를 다룰수 있는 인터페이스가 필요하다
Object 타입으로 람다를 다루기에 람다 관련 기능을 Object 클래스에 넣어야 하는 부담이 생김
람다식을 저장 할수 있는 변수는 함수형 인터페이스(Functional interface) 타입이어야 한다

FunctionalInterface myLambda = (a , b) -> a + b;
FunctionalInterface는 하나의 추상메서드만을 갖는 인터페이스다
그 추상 메서드의 시그니처(매개변수 개수와 타입, 리턴타입) 와 동일한 시그니처를 갖는
람다 함수를 할당 해서 사용할 수 있다

함수형 인터페이스 정의
함수형 인터페이스를 정의하고 '@FunctionalInterface' 애너테이션을 붙여주면 
자바 컴파일러가 함수형 인터페이스의 정의를 검증해준다

java.util.function 패키지
자바에서는 자주 사용되는 함수형 인터페이스들을 java.uitl.function 패키지에 미리 정의
이 패키지에 정의된 인터페이스를 사용하고 없는 경우에만 정의해서 사용하는게 좋다
가장 기본적인 
























