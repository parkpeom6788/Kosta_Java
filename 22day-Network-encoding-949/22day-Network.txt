**21day-2-Network**

Java 기반 TCP/IP 네트워크 프로그래밍

Protocol : 프로토콜 , 약속 , 통신규약 200 이라는 값 => 정상 수행 , 404 => 없는 값  , 500 => 서버 에러 

TCP/IP : 인터넷 통신 규약 
TCP : Transmission Control Protocol 전송을 제어 프로토콜 -> 데이터 전달 보증 
IP : Internet Protocol  IP Address 집주소,전화번호 같은거 ->  내 아이피 -> 192.168.56.1 (명령 프롬프트에서 ipconfig 로 확인 )
																								자신의 컴퓨터 IP 127.0.0.1
	DNS (Domain Name System ) -> www.google.com 아이피와 연결이됨
													사용자 접근성 높이기 위해 ip에 연결된 Domain Name를 사용한다
													자신의 컴퓨터 도메인 네임 localhost 
													
	Port : 포트 , 서비스 번호(입구) , 가상의 연결단위 
				http://127.0.0.1:8888
				http -> protocol
				127.0.0.1 -> ip
				8888 -> port 				
				일반적으로 사용하는 웹 port인 80 port는 생략 가능 	
				
	Socket : 네트워크 연결의 양끝단위 ( end point ) 로서 통신을 위한 인터페이스를 의미 
				( ex - 전화기 )
				Client 의 예
				Socket(server IP , port )
				socket.getOutputStream() => 서버로 출력하기 위한 스트림 
				socket.getInputStream() => 서버에서 입력받기 위한 스트림 
											
	ServerSocket : 서버에서 생성하는 서버소켓
							클라이언트의 접속을 대기하다 클라이언트가 접속하면 실행 
							대표전화의 역할 , 접수처의 역할을 함							
							accept() : 리턴타입이 Socket  => 클라이언트의 접속을 대기하다 클라이언트가 접속하면 실행
											일반소켓을 리턴해준다
											이 일반소켓이 클라이언트와 통신하게 된다
							ex) Server의 예
							
							ServerSocket(port)
							접속하는 클라이언트마다 반복문을 돌려줘야 함
							serverSocket.accept() : Socket
							socket.getInputStream();
							socket.getOutputStream();
step1 서버는 대기하다가
		클라이언트가 접속하면 그 클라이언트에게 메세지를 출력
		
		클라이언트는 서버로 데이터를 출력							
							
step2 서버는 다수의 클라이언트가 접속하면 순차적으로 메세지를 출력하도록 한다 
		클라이언트는 기존 step1과 동일하다 							
							
step3  서버는 클라이언트의 접속을 대기하다가 접속하면
		 클라이언트가 보낸 메세지를 입력받아 자신의 콘솔에 출력
		 순차적으로 계속 클라이언트의 접속을 대기하면서 서비스 
		 
		 클라이언트는 서버에 접속해서 메세지를 출력한 후 종료
		 - 소켓만 close 하면 다 close 됨 					
step4							
		 step3 과 서버 클라이언트가 동일
		 but 클라이언트 측에서 실행시 콘솔로부터 입력받아 서버로 메세지를 출력하는 
		 방식으로 업데이트 한다
		 ( System.in 	< Scanner )

step5
		EchoClient 와 EchoServer
		1 : 1 지속적 대화 
		
		Client		Server
		방가	   ->	방가를 받아서 다시 되돌려줌
		방가    <-  
		야호	   ->	
		야호	   <-
							
				 				
step6 															
		step5 연습예제를 풀이해본다
step7
		메아리 서비스를 다수의 클라이언트와 지속적으로 유지하는 서버를 구축해본다
		step5 , 6의 EchoClient 프로그램은 그대로 이용하면 됨
		
		서버만 새로 구현한다
		
		기존 1대1 에서 1대 다 로 지속적 메아리 서비스를 위해서는 
		멀티 스레드 방식을 이용해야 한다
		
		step7.MultiServer : ServerSocket(대표전화) accept() 를 통해 클라이언트가 접속하면
										해당 클라이언트와 연결된 Socket(직원 전화기)을 반환받고
										이를 ServerWorker 객체 생성시 할당한 후
										Thread 를 생성해 start 시키는 동작을 반복한다 
		step7.serverWorker : 실제 클라이언트에게 메아리 서비스를 제공하는 역할 
										implements Runnable
										echo() 메서드 하나 만듬
										클라이언트가 보낸 메세지를 입력받아 
										자신의 콘솔에 출력하고 다시 그 메세지를 해당 클라이언트에게
										출력하는 역할
										exit 가 전송되면 스레드를 break 종료한다 ( run() 을 종료한다 )
		 								
										 				
					

