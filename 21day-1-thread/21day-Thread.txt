**20day-Thread**
- Thread 개념 
- Thread 생성방법 
-  Daemon Thread
-  Synchronized Thread
---------------------------------------------------

Thread : 실 옷감 Process -> 현재 실행중인 상태에 있는 프로그램 
Thread -> process 내부의 세부적 실행단위 

동영상 플레이어 - 하나의 프로세스 
영상 음향 자막 이 동시에 동작되야함 
여러개의 실들이 모여서 옷감을 만들어 대듯이 동영상 플레이어 프로세스는 여러개의 스레드가 동시에 실행되면서 서비스함  
영상 Thread  , 음향 Thread , 자막 Thread 

Thread의 개념 ? 프로세스 : 현재 실행중인 프로그램 
멀티 프로세스 란? : 여거개가 실행중인 프로그램

멀티스레드 : 프로그램을 실행했을때 영상,음향,자막이 동시에 동작해야함 

- Thread : 프로세스 내부의 세부적 실행단위 , 스레드의 사전적 의미는 실
   Process 란 현재 실행중인 프로그램을 말함 
   ex) 동영상 플레이어가 실행 중이면 프로세스이고 
   그 동영상 플레이어 프로세스 내부의 세부적 실행 단위인 
   영상 , 음향 , 자막 과 같은 것이 스레드이다
   이들이 동시에 실행되는 것이 멀티 스레딩(Multi Threading)이라고 한다 
   
   여러개의 실(thread)이 모여 옷(process) 를 구성한다
	Multi - Thread  한 회사에 다수의 직업이 있다
	채팅클라이언트 - 입력스레드 출력스레드 최소2개
	Multi-Thread 
	채팅서버 1개의 서버 스레드 에  여러명의 접속자 수만큼 스레드가 필요함 
	main 메서드도 스레드 스택도 스레드이다
	
	- Thread 생성방법
	1. extends Thread
	2. implements Runnable  <- 객체지향 하면 이것을 선호함 왜? 자바는 단일상속이라서 
	객체의 상태가 변하는 걸 보는 다이어그램 - statediagram 
	
	스레드스케줄링
	start () : 프로그램시작 -> runnable 실행가능상태 -> jvm이 스케줄링해서 -> 러닝이됨(동시수행) ->  실행정의 RUN 에서 스레드의 실행내용을 정의 
	.start() 에서 JVM에게 실행해달라고 함
	
	곰플레이어,카톡 -> 실행중인 프로그램(프로세스)
	
	Thread : 실 -> 여러개가 모이면 precess 옷 
	process : 현재 실행중인 프로그램 
	쓰레드는 process 내의 실행 단위 
	UML 에서 다루는 릴레이션 , 분석작업이 먼가 ? 
	
	쓰레드,실행주체 -> JVM 
	개발자는 start() -> Runnable 여러스레드 대기중에 선택 -> 스케줄러에서 선택을 받는다. -> 
	콜센터직원50명이 있으면 50개의 스레드를 동시에 고객을 처리
	그것을 넘으면 Runnable 상태에 기다리고 있어야 한다. 
	한명이 나가면 JVM이 스케줄링 해준다
	스케줄링은 운영체제별로 다르다 
	스레드는 우선순위방식이다 우선순위를 1~10으로 높여주면 선택받을 가능성이 높아진다
	Run() 메서드가 동작이 다되면 스레드가 끝남
	
 - Thread  동작원리
 	start() : 스레드를 실행 가능(Runnable) 상태로 보낸다
 				 이후 JVM이 스케줄링을 해서 실행(Running) 상태로 보낸다
 	run() : 스레드의 실행 내용을 정의한다
 				JVM이 스케줄링을 하면 실행된다
 				run() 메서드 실행이 완료되면 스레드는 종료된다 
 	스레드 스케줄링은 운영체제별로 차이가 있다
 	기본적으로 자바 스레드는 우선순위 방식을 채택 ,
 	기본이 5 , 가장 낮은 우선순위는 1 , 가장 높은 우선순위는 10이다 
 	우선순위가 적용되는 여부는 운영체제별로 상이하므로 참고만 한다
 	
 	채팅클라이언트 - 클라이언트와 서버측에 다 만드는데 채팅에서 클라이언트 측에 출력과 입력 io스레드 , 네트워크 기술을 써가지고 만들것이다
 	미리 예습겹 구조를 잡아주면 좋다 
 	
 	Multi-Thread 의 예 		채팅 클라이언트 
 	
 	채팅클라이언트 process
 	InputThread , OutputThread - 2개 Thread가 Multi Threading 되어야 한다
 	InputWorker 를 쓰레드에 할당 , OutputWorker 를 쓰레드에 할당 
 	입력과 출력의 쓰레드
 	
 	로그인 -> 로그인을 담당하는 서블릿 객체가 하나 있음 
 	로그인이라는 서비스는 동일 고객들이 다름 그래서 이런경우 클라이언트에서 클래스가 달라 근데 서버입장은 동일한 서비스에 고객이 다른것
 	
 	Client					Server Process
 				------->	 searchService() 접수처가 main Thread(콜센터의 대표-접수)
 				<------ 동시에 여러클라이언트와 대화하기 위해 Thread1,Thread2 	
 							실제 서비스는 콜센터 직원 
 						
 	Client
 				클라이언트 한명 추가시 Thread 추가 ,  접수처에서 클라이언트가 한명접속시  직원Thread를 new 생성해주면 된다. -> new -> start 
 				
 	채팅서버 프로세스 입장에서 어떤 클라이언트가 접속했는지 감지하고 접수처역할을 하는 사장 대표 main 이 필요
 	사장이 접수하고 오면 직원을 배당(디스패처) 시킨다 
 	클라이언트가 동시에 자기 서버를 가지고 있고 스레드 하나 스레드 두개 스레드 세개 즉  총 4개의 스레드가 동작하고 있다 -> 멀티스레드
 	
 	지역변수를 Local variable 을 저장하는 stack 메모리 영역은 
	스레드 별로 생성되어 독립적으로 관리된다 ( step2. TestThread6)
	
	데몬스레드
	메모장 Thread
	3초간격 자동백업 Thread
	
	Daemon Thread 자신을 실행시킨 스레드가 종료되면 함께 종료되도록 설정 
	ex) 송신스레드,수신스레드 채팅클라이언트종료시 각기 활동하는 종료시점에 같이종료되야함
		
 Daemon Thread ( 데몬 스레드 ) : 자신을 생성한 스레드가 종료되면 함께 종료되는 스레드
 java.lang.Thread의 setDaemon(true) 로 설정한다
 ex) 워드 스레드가 종료되면 백업스레드 또한 함께 종료되어야 하므로 
 		백업 스레드를 Daemon Thread로 설정한다 
 		
 		Thread -  	개념 - 프로세스 내부 실행단위 process 현재 실행중인 프로그램
					스레드 끼리 데이터 공유할수있다
		MultiThread  다수의 스레드가 동시동작 하는데 			
 	
 	 생성방법 1. extends Thread
 	 				2. implements Runnable
 	 동작원리 
 	 	JVM에 스케줄링되서 Running 실행상태가 됨 - run()
 	 	JVM에의해서 Runnable 실행가능상태가 됨 - start()
 	 	Daemon 스레드 데몬 - 자신을 생성한 스레드와 함께 종료됨 
 	 	
 	 	동기화 synchronized 
		
		파일을 만드는데 
		만들어진 파일을 지켜보면서 디렉터리 별로 mp3면 음악폴더
		avi면 영화폴더로 이동시켜주는 스레드 	 	
 	 	

 	 	지역변수 Local variable 을 저장하는 Stack 메모리 영역은
 	 	스레드 별로 생성되어 독립적으로 관리한다
 	 	
 	 	인스턴스 변수 instance variable ( 객체 정보) 를 heap 메모리 영역은
 	 	하나 존재하여 여러 스레드가 공유할 수 있다 
 	 	( 예 - 로그인서블릿 객체는 하나만 생성하고 여러 스레드에서 공유해서 사용하고
 	 	클라이언트 담당 스레드는 클라이언트 수 만큼 	생성해서 서비스한다 )
 	 	
 	 	멀티스레딩시 데이터(heap 영역에 있는 객체 정보)를 공유할 수 있다
 	 	
 	 	- synchronized :	동기화 처리를 위한 자바 키워드 
 	 								* 특정 영역을 단일 스레드 환경으로 만드는 것 *
 	 								
 	 								synchronized 동기화 처리란 특정 스레드가 작업 중에는
 	 								다른 스레드들이 작업에 참여할 수 없게 하는 것이다 ( 단일 스레드 환경 )
 	 								
 	 								여러 손님들이 카페 하나 화장실을 이용할 때 그 시점에서는
 	 								-> 멀티 스레딩시 synchronized 동기화 처리를 하면 
 	 								공유 정보에 대한 안전성과 신뢰성을 높인다 ( thread-safe )  	
 	 								
 	 								ex) 여러 고객들이 영화좌석을 예매할 때 예매시점에서는 단일 스레드 환경으로 처리
 	 										동일한 좌석을 예매하는 상황을 방지하기 위해
 	 										동시에 사용할 수 없으므로  단일 스레드 환경으로 처리 
 	 								여러 스레드가 하나의 자원을 공유해서 사용할 때
 	 								즉 멀티 스레딩시 특정 영역에서는 반드시 단일 스레드 환경으로
 	 								처리해야 하는 경우 synchronized keyword를 이용한다 
 	 								
 	 								1) 메서드 단위에서 동기화 처리
 	 									ex) public synchronized void reserve(){}
 	 								2) 특정 영역 단위에서 동기화 처리
 	 									ex) public void reserve() {
 	 											synchronized(this) {	 												
 	 											}
 	 									}
 	 	- java 주요 클래스들의 thread synchronized ( thread - safe )
 	 	문자열 관련 
 	 	String 불변 , 변경 시 새로 생성 , 문자열 영역에 공유 , 동일한 문자열이 자주 쓰일 때 적합 
 	 	StringBuilder : 가변 , 변경 시 자체가 변경 , 문자열 자체가 자주 변경될 때 적합 , 단일 스레드 환경에 적합 
 	 	StringBuffer : 가변 , 변경 시 자체가 변경 , 문자열 자체가 자주 변경될 때 적합 , 멀티 스레드 환경에 적합 
 	 							thread safe : 멀티 스레드 환경에 적합 
 	 	컬렉션 계열
 	 					thread safe
 	 	ArrayList vs Vector 		
 	 	HashMap	vs Hashtable 
 	 	
 	 	위의 Vector 와 Hashtable은 동기화 처리 되어 있지만 최근에는 
 	 	List 나 Map , Set 계열의 동기화 처리 ( synchronized ) 시에는
 	 	Collections.synchronizedList() or  Collections.synchronizedMap() , Collections.synchronizedSet()
 	 	을 이용하는 것을 추천한다 ( 이후 네트워크 채팅 구현에서 사용해본다 ) 
  	 	
 	 	
 	 	
 	 	 
 	 				
 	
 	
 		
 				
 				
 				
 				
 				
 				
 				
 				
	
	
	
	
	
	
	
	
	
	
	
	
	 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	