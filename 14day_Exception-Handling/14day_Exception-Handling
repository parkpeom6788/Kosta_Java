**14일차 주요목차**
- Exception Handling ( 예외처리 )
	Exception Handling(예외처리) 이란
	프로그램 수행 중 Exception 발생 시 (수행 자체 JVM)
	기본적인 설정은 종료가 되도록 한다. 
	예외 대처 흐름 or 대처 방안 or 핸들러 로직 
	실행하고 프로그램을 정상 실행하는 것을 말한다 
	( JVM이 프로그램 실행 중 Exception 발생시키고 별도의 핸들링이 없으면
	기본적으로 예외 발생 즉시 종료가 된다. )
ex-> 실세계 배 아프면 병원가서 주사 또는 약먹고 공부 계속한다.	
예외 - 배아프면 
핸들링-  병원가서 주사 또는 약먹고  - 핸들링 처리 안하면 즉시 종료됨 
finally - 공부 계속 한다.
try : Exception 발생 예상 영역을 지정 - 트랜잭션업무단위 
catch : Exception Handling , 예외 처리 , Exception 발생 시 대처 방안 실행 후 정상 수행이 목적 
finally : 무조건 카드회수! Exception 발생 여부와 처리 여부와 관계 없이 항상 실행 ( 무조건 마지막에는 카드를 돌려준다 )  
throws : Exception 을 호출한 측으로 던질수있다는 의미 ( 메서드 선언시 명시 ) , 
throw : Exception 을 고의로 발생 

모든 업무 시스템에는 일반적힌 흐름 과 예외적인 상황이 존재한다 -> 예외상황이 발생하면 대처하고 정상수행 하기 위해서 

throws를 공부하는 이유
public Result find() throws FindException {  // 가독성이 높음 , 응집도를 높인다 
	return 검색결과   검색결과가 잘나왔으면 Result 를  에러처리는 throws 로 
															if else 로 처리하면 가독성이 매우 안좋음 
}

UnChecked Exception 계열 : RuntimeException 클래스의 자식 Exception 클래스들을 말한다
										대표적으로 NullPointerException , IndexOutOfBoundsException
														NumberFormatException 등이 있다 
										메서드에서 throws 를 명시하지 않아도 RunTime 계열의 Exception은
										자동으로 throws 된다 ( 호출한 측으로 전파된다 )				
Checked Exception 계열 :  컴파일 시점에 Exception 처리를 체크할 수 있는 Exception 계열  , FileNotFoundException
										Exception 처리는 try ~ catch 또는 throws 로 선택 
										throws : 너가 처리 하지말고 보내라
										try ~ catch : 내가 처리 
								Runtime 계열 Exception 을 제외한 모든 Exception은 checkedException dlek 
								
UnChecked Exception 와 	Checked Exception 구분하는것은 런타임 계열이냐 아니냐 에 따라 에 다르다

Checked Exception 은 컴파일시점에 Exception 을 체크할수 있게 해준다 




				
