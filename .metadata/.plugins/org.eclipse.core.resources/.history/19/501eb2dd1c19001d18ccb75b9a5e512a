package step2;
import java.util.ArrayList;
// 집합(aggregation), 구성(composition)
class Animal {
	public void eat() {
		System.out.println("먹다");
	}
}
public class TestGeneric {
	public static void main(String[] args) {
		// Generic : 타입의 안정성을 보장 , 객체 캐스팅 절차를 감소
		// Generic 을 사용하지 않은 경우의 예
		/*
		ArrayList animalList = new ArrayList();
		animalList.add(new Animal()); // 제너릭을 안걸면 Object 타입으로 다 받는다.
		animalList.add(28); // 동물 리스트에 다른 종류의 데이터가 저장될 수 있음 -> 타입의 안정성이 떨어짐
		// 동물 리스트의 첫번째 요소의 eat 메서드를 호출하고자 함
		Animal animal = (Animal)animalList.get(0);
		((Animal)animalList.get(0)).eat(); // 제너릭을 적용하지않아 리턴이 object 타입이므로 객체 캐스팅 절차가 필요함
		*/
		
		// Generic 적용 
		ArrayList<Animal> animal = new ArrayList<Animal>();
		animal.add(new Animal());
			
	}
}
